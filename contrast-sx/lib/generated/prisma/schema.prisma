generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model listofscrapers {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  status        String?       @default("healthy")
  created_on    DateTime      @default(now()) @db.Timestamp(6)
  last_modified DateTime?     @default(now()) @db.Timestamp(6)
  last_ran      DateTime?     @db.Timestamp(6)
  spider_logs   spider_logs[]
}

model product_prices {
  price_id     Int      @id @default(autoincrement())
  product_id   Int
  price        Decimal  @db.Decimal(10, 2)
  retrieved_on DateTime @default(now()) @db.Timestamp(6)
  products     products @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)
}

model products {
  product_id     Int              @id @default(autoincrement())
  store_id       Int
  product_name   String           @db.VarChar(255)
  product_url    String           @unique
  is_active      Boolean?         @default(true)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  image_urls     String[]
  latest_price   Int?
  categories     String?
  product_prices product_prices[]
  stores         stores           @relation(fields: [store_id], references: [store_id], onDelete: Cascade, onUpdate: NoAction)
}

model shahzar_table {
  id    Int     @id @default(autoincrement())
  name  String
  price Decimal @db.Decimal(10, 2)
  image String
  url   String
  store String
}

model spider_logs {
  id                  Int            @id @default(autoincrement())
  scraper_id          Int
  scraper_name        String
  celery_trigger_time DateTime       @db.Timestamp(6)
  actual_start_time   DateTime       @db.Timestamp(6)
  end_time            DateTime?      @db.Timestamp(6)
  duration_seconds    Int?
  retries             Int?           @default(0)
  result              String?
  terminal_notes      String?
  listofscrapers      listofscrapers @relation(fields: [scraper_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model stores {
  store_id          Int        @id @default(autoincrement())
  store_name        String     @unique @db.VarChar(255)
  last_retrieved_on DateTime?  @db.Timestamp(6)
  created_at        DateTime?  @default(now()) @db.Timestamp(6)
  products          products[]
}
